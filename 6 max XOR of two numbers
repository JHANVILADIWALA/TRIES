// https://www.codingninjas.com/codestudio/problems/maximum-xor_973113?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_tries_videos&leftPanelTab=1

struct Node{
  Node*links[2];

  bool containskey(int bit){
      return (links[bit]!=NULL);
  }
  void put(int bit,Node*node){
      links[bit]=node;
  }
  Node*get( int bit ){
      return links[bit];
  }
};
class Trie{
    private: Node*root;
    public:
      Trie(){
          root=new Node();
      }
    public: //insert and getmax function
     void insert(int num){
         Node * node=root;
         for (int i = 31; i >= 0; i--) { // kyuki starting se insert krna h
           // for 32 bits
           int bit = (num >> i) & 1;
           if (!node->containskey(bit))
            { 
                node->put(bit, new Node());
            } 
            node = node->get(bit);
         }
     }

   public:
     int findmax(int num){//return krega max value of that num with a number in array
      int maxval=0;
      Node*node=root;
      for(int i=31;i>=0;i--){
          int bit=(num>>i)&1;
          //bit tells the val is 0 or 1
          if(node->containskey(1-bit)){//contains opposite
            maxval=maxval|(1<<i);//max val ki vo bit set krdenge
            //left shift 1 i times
            node=node->get(!bit);
            //uske opposite ke hi ref trie pe chl jao
          }
          else{//doesnt contain->>seedha chl jao next pe USKE HI
            node=node->get(bit);
          }
      }
      return maxval;

    }
};
int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) 
{   Trie trie;//object created
    int ans=0;
    for(int i=0;i<n;i++){
       trie.insert(arr1[i]);
    }//trie me arr1 is inserted
    for(int i=0;i<m;i++){
      ans=max(ans,trie.findmax(arr2[i]));
    }
    return ans;

}
